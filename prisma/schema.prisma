// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5434/nest_db?schema=public"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id     Int     @id @default(autoincrement())
  name   String
  email  String  @unique
  orders Order[]
}

model Product {
  id     Int     @id @default(autoincrement())
  name   String
  price  Float
  orders Order[]
}

model Order {
  id         Int      @id @default(autoincrement())
  quantity   Int
  total      Float
  createdAt  DateTime @default(now())
  customerId Int
  productId  Int

  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model Project {
  id          Int                 @id @default(autoincrement())
  name        String
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus
  createdAt   DateTime            @default(now())
  tasks       Task[]
  assignments ProjectAssignment[]
}

model Member {
  id          Int                 @id @default(autoincrement())
  name        String
  role        String
  joinedAt    DateTime
  assignments ProjectAssignment[]
}

model ProjectAssignment {
  projectId    Int
  memberId     Int
  assignedRole String

  project Project @relation(fields: [projectId], references: [id])
  member  Member  @relation(fields: [memberId], references: [id])

  @@id([projectId, memberId])
}

model Task {
  id        Int      @id @default(autoincrement())
  projectId Int
  title     String
  completed Boolean
  dueDate   DateTime

  project Project @relation(fields: [projectId], references: [id])
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELED
}

enum PedidoStatus {
  RECEBIDO
  PREPARANDO
  PRONTO
  ENTREGUE
}

model Pedido {
  id        String      @id @default(uuid())
  customer  String
  status    PedidoStatus @default(RECEBIDO)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  items PedidoItem[]
}

model PedidoItem {
  id   String @id @default(uuid())
  dish String
  qty  Int    @default(1)

  orderId String
  order   Pedido  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
